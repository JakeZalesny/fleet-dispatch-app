generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  id                      String    @id @default(cuid())
  first_name              String?   @db.VarChar(20)
  last_name               String?   @db.VarChar(20)
  license_number          String?   @db.VarChar(20)
  license_expiration      String?   @db.VarChar(20)
  license_class           String?   @db.VarChar(1)
  current_location        String?   @db.VarChar(20)
  in_range                Boolean?  @default(false)
  is_available            Boolean?  @default(true)
  driver_reports_ready    Boolean?  @default(false)
  has_home_need           Boolean?  @default(false)
  assigned_truck_id       String?
  phone_number            String?   @db.VarChar(15)
  emergency_contact       String    @db.VarChar(20)
  emergency_contact_phone String    @db.VarChar(15)
  hours_driven_today      Int?
  hours_driven_week       Int?
  last_rest_period        Int?
  certifications          String[]
  drug_test_current       Boolean?
  employment_status       String?   @db.VarChar(20)
  hire_date               DateTime? @db.Date
  trucks                  Truck?   @relation(fields: [assigned_truck_id], references: [id], onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Trailer {
  id                        Int       @id @default(autoincrement())
  assigned_truck_id         String?
  current_location          String?   @db.VarChar(20)
  has_registration          Boolean?  @default(true)
  bureaucratically_sound    Boolean?  @default(true)
  correct_equipment_working Boolean?  @default(true)
  in_range_first_stop       Boolean?  @default(false)
  make                      String    @db.VarChar(20)
  model                     String    @db.VarChar(20)
  year                      Int?
  max_cargo_capacity        Decimal?  @db.Decimal(7, 2)
  current_cargo_weight      Decimal?  @db.Decimal(7, 2)
  license_plate             String?   @db.VarChar(20)
  registration_expiry       DateTime? @db.Date
  last_inspection_date      DateTime? @db.Date
  next_inspection_due       DateTime? @db.Date
  required_permits          String[]
  insurance_valid           Boolean?
  truck_id                  Truck?   @relation(fields: [assigned_truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Truck {
  id               String     @id @default(cuid())
  license_plate    String     @unique @db.VarChar(20)
  make             String     @db.VarChar(20)
  model            String     @db.VarChar(20)
  year             Int?
  capacity_tons    Decimal?   @db.Decimal(5, 2)
  mileage          Int?
  is_active        Boolean?   @default(true)
  current_location String?    @db.VarChar(20)
  assigned_driver  Boolean?   @default(false)
  driver_id        Int?
  assigned_trailer Boolean?   @default(false)
  trailer_id       Int?
  created_at       DateTime?  @default(now()) @db.Timestamp(6)
  driver           Driver[]
  trailer          Trailer[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
  DISPATCHER
  DRIVER
}

